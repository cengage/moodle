{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny LTI commands.\n *\n * @module      tiny_lticommands\n * @copyright   2023 Claude Vervoort Cengage Group <claude.vervoort@cengage.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {getDeeplinkingOptions} from './options';\n\nimport {\n    component,\n    ltiButtonName,\n    icon,\n} from './common';\nimport DeepLinking from './deeplinking';\n\nexport const getSetup = async() => {\n    const [\n        buttonTooltip,\n        iconImage\n    ] = await Promise.all([\n        getString('pluginname', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return async (editor) => {\n        /*\n        const getMenuItems = async() => {\n            const request = {\n                methodname: 'mod_lti_get_deeplinking_for_richtexteditor',\n                args: {'contextid': getContextId(editor)}\n            };\n            const [tools] = await Promise.all(ajax.call([request])); \n            const items = tools.types.map(t=>{ return {\n                type: 'menuitem',\n                text: t.name,\n                onAction: () => alert(t.id)\n            };});\n            console.log(\"items async\", items)\n            return items;\n        }*/\n        editor.ui.registry.addIcon(icon, iconImage.html);\n        /*editor.ui.registry.addMenuItem(ltiButtonName, {\n            icon,\n            text: buttonTooltip,\n            onAction: () => {\n                const dl = new DeepLinking(editor);\n                dl.displayDialogue();\n            }\n        });*/\n        const items = getDeeplinkingOptions(editor).map(dl => {\n            return {\n                type: 'menuitem',\n                text: dl.name,\n                onAction: () => alert(dl.url)\n            }; \n        });\n        editor.ui.registry.addNestedMenuItem(ltiButtonName, {\n            icon,\n            text: buttonTooltip,\n            getSubmenuItems: () => items\n        });\n    };\n};"],"names":["async","buttonTooltip","iconImage","Promise","all","component","editor","ui","registry","addIcon","icon","html","items","map","dl","type","text","name","onAction","alert","url","addNestedMenuItem","ltiButtonName","getSubmenuItems"],"mappings":";;;;;;;0KAkCwBA,gBAEhBC,cACAC,iBACMC,QAAQC,IAAI,EAClB,mBAAU,aAAcC,oBACxB,yBAAe,OAAQA,4BAGpBL,MAAAA,SAgBHM,OAAOC,GAAGC,SAASC,QAAQC,aAAMR,UAAUS,YASrCC,OAAQ,kCAAsBN,QAAQO,KAAIC,KACrC,CACHC,KAAM,WACNC,KAAMF,GAAGG,KACTC,SAAU,IAAMC,MAAML,GAAGM,SAGjCd,OAAOC,GAAGC,SAASa,kBAAkBC,sBAAe,CAChDZ,KAAAA,aACAM,KAAMf,cACNsB,gBAAiB,IAAMX"}